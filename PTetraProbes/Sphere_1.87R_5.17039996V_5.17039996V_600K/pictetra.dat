//Input file for picTetra

//Units: all units are in SI except for:
//       - temperatures which are in eV,
//       - charges which are in elementary charge e
//       - masses which are in AMU
// N.B.: Variables with a default value may be omitted

//-------------------------------------------
//  PLASMA PARAMETERS
//-------------------------------------------
//nepop: number of electron populations
//nipop: number of ion populations
//magfield: .true. (.false.) when there is (no) magnetic field
//jandb: .true. (.false) to compute (or not) current density and B
//       Default value: .false.
//       deprecated in version 46
//b_field: cartesian components of the background magnetic field
//seljandb: used to select the calculation of the current density and
//          perturbed magnetic field
// 0: no calculation of J or del-B
// 1: to compute J and Jav only at every timestep
// 2: to compute J, Jav and del-B at every mesh point.
//    del-B is only calculated at the end of a simulation.
// 3: to compute J and del-B at points listed in deltab.dat only.
//    del-B is not calculated at every mesh point.
// 4: to compute J, del-B at every mesh point and at selected points with
//    coordinates listed in file deltab.dat, all at the end of a simulation.
//    Computed del-B at these points are then printed in deltab.out.
&plasmaparameters
 nepop=1
 nipop=1
 magfield=.false.
 seljandb=0
 b_field=0.  0.  50.e-6
/

//The code will create nepop+nipop species, as specified below.
//  electron species must be specified first and variables must be
//  given in the same sequence as given below.
//ne: density of a given electron species
//fromne(i): previous density. Used when changing electron density at
//           restart. Ignored if negative. Default: -999.
//te: temperature of a given electron species
//vexyz: velocity vector of a given electron species
//  repeat as many times as there are electron species
//mi: mass (amu) of a given ion species
//qi: charge (e) of a given ion species
//ni: density of a given ion species
//fromni(i): similar to fromne for ions
//ti: temperature of a given ion species
//vixyz: velocity vector of a given ion species
//  repeat as many times as there are ion species
$begin plasmaparameters
  ne=1e11
	te=0.051704
  vexyz=0.  0.      0.
  mi=1.
  qi=1.
  ni=1e11
	ti=0.051704
  vixyz=0.  0.      0.
$end plasmaparameters

//-------------------------------------------
//  INJECTION PARAMETERS
//-------------------------------------------
//inj_nstr: number of internal structures (physical groups) from which
//          plasma injection takes place. default=0
//inj_ninj: total number of simulation particles injected from physicals
//          per unit time (per second). type: real
//inj_str: array of structure indices (as in the mesh file) from which
//          particles are injected. can be referred to via sc_table array
//inj_nepop(inj_nstr): table of number of electron species for
//          each injecting physical
//inj_nipop(inj_nstr): table of number of ion species for
//          each injecting physical
//inj_ne(:,:), inj_Ie(:,:), inj_Te(:,:), inj_vexyz(3,:,:) electron,
//          fluxes, and other plasma parameters for electrons
//ini_I?: fluxes in ampere; i.e., particle fluxes * electron charge.
//      These are always positive independently of the sign of the charge.
// N.B.: inj_ne and inj_ni have precedence over inj_Ie and inj_Ii.
//       i.e., if the former are non zero and the later are > 0, then
//       inj_I? is ignored and fluxes are calculated from inj_n? only
//inj_ni(:,:), inj_I(:,:), inj_Ti(:,:), inj_vixyz(3,:,:),
//          inj_mi(:,:),inj_qi(:,:) similar parameters for ions
//inj_npopmax: maximum number of injected populations between electrons
//          and ions
//inj_winj: statistical used for all injected particles
//N.B.: if fluxes are zero, they are computed from densities and
//      temperature or vice versa.
&injectionparameters1
  inj_nstr=0
  inj_ninj=86.0e10
/

&injectionparameters2
  inj_str(:)=4
  inj_nepop(1)=1
  inj_nipop(1)=1
/

&injectionparameters3
  inj_Ie(1,1)=5.e-3
  inj_ne(1,1)=0.e8
  inj_Te(1,1)=2.337e-4
  inj_vexyz(:,1,1)=0. 0. 1.e4
  inj_Ii(1,1)=5.e-3
  inj_ni(1,1)=0.e10
  inj_Ti(1,1)=0.01
  inj_vixyz(:,1,1)=0. 0. 1.e4
  inj_mi(1,1)=1.
  inj_qi(1,1)=1.
/

//-------------------------------------------
//  SIMULATION CONTROL PARAMETERS
//-------------------------------------------
//restartfrom: root name of the restart file for a restart
//  'null' for a fresh start
//  Ex.: For a single processor job, if the restart file(s) are
//       pictetrabin012345.rdm or pictetra012345.rdm, then restartfrom
//       should be 'pictetrabin012345' or 'pictetra012345' respectively.
//       For a multi-processor job, if the restart files are
//       pictetrabin012345_000000, pictetrabin012345_000001, ..., then
//       restartfrom should be 'pictetrabin012345'.
//       Similarly for pictetra012345_000000, pictetra012345_000001, ...
//       and it may also include the path to restart file(s).
//       Specify relative or absolute path if in another directory.
//rdm: deprecated
//     .true. of .false. for a restart or a fresh simulation respectively
//     When restarting, the code reads from restart file "pictetra.rdm"
//rdmfmt: true or false to produce formatted or unformatted restart files.
//ntmax: maximum number of time steps
//tstop: maximum duration of the simulation
//epsildt: multiplying factor of the time step based on the estimated
//         maximum particle speed and the linear scale factor of the
//         smallest cell
//dtrdm: number of timesteps between creation of restart files
//       if negative, no restart file is printed
//dtdia: number of timesteps between creation of diagnostics
//ifrext: index of external boundary (from where plasma is injected)
//        if 0, then the lowest boundary index is used
//        may not be negative
//outputformat: 'vu' to have output in Vu format.
//              'vtk' to have output in VTK format.
//              In any case, ouput is always produced in topo format.
//              topo format is used for particle backtracking and
//              postprocessing also, topo output is only produced at
//              the end of the run
//mpitimemax: maximum duration of a simulation in hours
//mpitimerdm: wall clock interval between writing of restart files (h)
&simulationparameters
  restartfrom='null'
  rdmfmt=.false.
  ntmax=10000000
  tstop=20e-6
  epsildt=3.0
  dtrdm=10000000
  dtdia=100
  ifrext=1
  outputformat='vtk'
  mpitimemax=167.0
  mpitimerdm=167.0
/

//-------------------------------------------
//  SIMULATION NUMERICAL PARAMETERS
//-------------------------------------------
//nepercell: target number of electrons in the smallest cell.
//           used only if set > 0 in namelist. default=-99
//netotIni: initial total number of electrons.
//          used if nepercell < 0
//nInMain: .true. if the main process receives its fair share of
//         macroparticles.
//         .false. if the main process receives no particles and
//         particle pushing is only done by other processes. This is
//         useful when working with large meshes and the main process
//         needs more memory than the others to hold the preconditioning
//         matrix.
//speedup: speedup factor applied to the electron equation of motion every time
//         step, electrons are pushed for a time step = dt/speedup
//         The electron timestep is the calculated timestep divided by speedup
//         Ions have the calculated timestep.
//prefill: true or false to have a simulation domain initially filled with
//         particles with the perscribed distribution function (true) or
//         empty (false)
//nofield: .t. or .f. to ignore all fields or calculate self consistently
//         from solving Poisson's equation.
//tauAv: relaxation time used to compute the phi and rho averages
//scc_tau: relaxation time used to compute collected surface current
//         densities
//solMethod: GaussSeidel or YousefSaad_GMRES
//           only use GaussSeidel for quick runs where Poisson's equation
//           is not important.
//EContinuous: selects continuous (.t.) or piecewise constant (.f.)
//             interpolation of the electric field

&numericalparameters
	netotIni=60000000
  nInMain=.true.
  speedup=1.
  prefill=.true.
  nofield=.false.
  tauAv=1.e-6
  scc_tau=1.e-6
  solMethod='YousefSaad_GMRES'
  EContinuous=.true.
/

//-------------------------------------------
//  SPACECRAFT PARAMETERS
//-------------------------------------------
//sc_c_mult: Multiplicative factor for structure mutual capacitances
//  after being computed from solving Laplace's equation, all capacitances
//  are multiplied by sc_c_mult.
//  This must be 1 whenever a finite B and cross velocity are specified.
//sc_nnetBias: Number of networks of sc elements between which relative
//  biasings are specified. Different networks are electrically independent
//  from one another. Only elements within a given network are biased with
//  respect to one another. If zero, no network will be considered and all
//  SC elements will be treated as independently floating (and variables
//  related to circuits and biases below will be ignored).
//sc_fixedPot: flag used for ad hoc specification of fixed potentials on
//             each structure (physical groups). If == -9999. (default),
//             potentials are computed self-consistently from mutual
//             capacitances and collected charges.
//       N.B.: When different from -9999, ad hoc potentials must be
//             specified for all structures under "begin sc_fixedPot".
//             These potentials will remain fixed through the entire
//             simulation.
//sc_fixedpotentials: .true. or .false. depending on whether structure
//  potentials are fixed a priori, or calculated self-consistently.
//  if true, potentials for all structures must be specified below
//  under "begin sc_fixedPot"
&satelliteparameters
  sc_c_mult=1.
  sc_nnetBias=1
  sc_fixedpotentials=.true.
/
$begin sc_fixedPot
		5.17039996	5.17039996
$end sc_fixedPot

//Definition of imposed collected current (A) by each satellite structure
//element. For example, if component 1 collects 1.e10 more electrons than
//ions per second, the corresponding entry would be "1  -1.602e-9"
//In this example, -1.602e-9*dt would be subtracted from the satellite
//component at each time step so that that component would have to collect
//current 1.602e-9 A at steady state.
//By default, all components collect zero net current.
//The begin iem - end iem construct below only needs to be specified when
//non zero currents are specified. That construct could be omitted
//altogether, and default values would be used. There is no harm, however,
//in specifying zero current explicitly for any number of components
$begin iem
2  -0.e-2
$end iem

//definition of network relative biases. biases are always defined with
//respect to the 1st node in a given network. for example, if in a network
//of two nodes, node 1 is set to 5 volts and node 2 to 5.5 volts, node 2
//will be biased to 0.5 volts with respect to node 1, but the absolute
//voltage of node 1 will not necessarily be 5 volts. It will be determined
//from the collected/emitted currents. In other words, the voltage specified
//for node 1 is not used to specify the absolute voltage of that node.
//Caution: Nodes may only appear once (networks must be disjoint)
//nnotes: number of nodes in a given network
$begin netBias
nnodes=1
1  0.0
$end netBias

//Definition of the structure materials. the list of material properties
//are in the sc_materials.dat file. the parameters listed are described
//in this file.
$begin matid
1  001
$end matid

//-------------------------------------------
//  SOLAR PARAMETERS
//-------------------------------------------
//f107: multiplicative factor for emitting photoelectrons. The emitted
//      current is that specified in the materials data file times f107
//      If f107 == 0, then no photoelectrons are emitted. f107 ~ ratio
//      between the actual F10.7 flux and the average value (~200).
//usun: vector pointing in the direction of the sun in the spacecraft
//      system of coordinates.
//radSunAng: solar angular radius in degrees
//numPhotoElec: number of macroparticle photoelectrons emitted per second
//se_fromelec: swith to include (true) or not (false) secondary electron
//             emission from electron impact (default .false.)
//se_albedo: to accound (true) or not (false) for electron reflection
//           (default .false.)
//se_fromions: to account (true) or not (false) for secondary electron
//             (default .false.)
&solarparameters
  f107=0.0
  usun= 1. 0. 0.
  radSunAng= 0.
  numPhotoElec=1000.e7
  se_fromelec=.false.
  se_albedo=.false.
  se_fromions=.false.
/

//-------------------------------------------
//  neutrals for charge exchange
//-------------------------------------------
//cxsigma: charge exchange cross section
//dnn:     neutral density
//tn:      neutral temperature
//vn:      neutral velocity vector
&cxneutrals
  sigmacx=0.e-18
  dnn=0.e18
  tn=0.04
  vn=0. 0. 0.
/
//--------------------------------------------
// reflection parameters
//-------------------------------------------
//mr_nrfl: number of reflections
//mr_npts: number of points distributed in a triangle
//mr_albedo: the ratio of the light reflected to the received light.
//mr_specular:

&reflectionparameters
mr_nrfl=0
mr_albedo=0.6
mr_specular=1.0
mr_npts=1
/
